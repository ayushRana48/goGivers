type Invite {
  sender: String
  groupId: String
}

type Donation {
  Id: ID
  username: String
  groupId: String
  amount: Float
  paid: Boolean
}

type Record{
  Id: ID
  loser:String
  amount:Float
  paid: Boolean
  date: AWSDate
}

type User {
  username: String
  Id: ID
  runs: [Run]
  mileage:Float
  moneyRaised: Float
  strikes: Int
  charity: String
  stravaRefresh: String
}

type Run {
  date:AWSDate
  distance:Float
}

type GroupsModel @model @auth(rules: [{allow: public}]) {
  id: ID!
  usersList: [User]
  host: User!
  moneyMile: Float
  minMile: Int
  minDays: Int
  groupName: String
  invites: [String]
  startDate: AWSDate
  moneyPool:Float
  lastStravaCheck: AWSDate
  nextStrikeUpdate: AWSDate
  currLoser: String
  Records: [Record]
  
}

type UsersModel @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: String!
  username: String!
  groups: [ID]
  totalMileage: Int
  totalMoneyRaised: Float
  totalMoneyDonated: Float
  stravaRefresh: String
  invites: [Invite]
  lastStravaCheck: AWSDate
  donations:[Donation]
}
 